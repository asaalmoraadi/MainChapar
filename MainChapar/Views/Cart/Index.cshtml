@model MainChapar.ViewModel.CartViewModel
@{
    Layout = "~/Views/Shared/_newLayout1.cshtml";
}

@if (TempData["CartDebug"] != null)
{
    <div style="background-color:#eee;padding:10px;border:1px solid #ccc;margin:10px;">
        @TempData["CartDebug"]
    </div>
}

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/assets/shopping cart/styles2.css" />
    <title>سبد خرید</title>
</head>

<h1>سبد خرید من</h1>

@if (TempData["Error"] != null)
{
    <div style="background-color: #fff4f4; border: 1px solid #e44d4d; padding: 12px 16px; border-radius: 10px; margin: 20px auto; color: #c0392b; max-width: 600px; font-size: 14px;">
        <strong style="font-size: 15px;">⚠️ خطا:</strong>
        <div style="margin-top: 8px;">
            @TempData["Error"]
        </div>
    </div>
}

<div class="cart-container">
    
        @Html.AntiForgeryToken()


        @* محصولات فیزیکی *@
        @if (Model.Products != null && Model.Products.Any())
        {
            foreach (var item in Model.Products)
            {
                <div class="item" data-id="@item.Id">
                    <div class="cart-item">
                        <div class="item-details">
                            <p class="product-name"><strong>@item.Title</strong></p>
                                    <p>موجودی: <span class="product-stock"
                                        data-id="@item.Id">@item.AvailableStock</span> عدد</p>
                        </div>

                        <div class="counter">
                                    <p class="price" data-id="@item.Id" data-unit-price="@item.UnitPrice">
                                        @item.TotalPrice.ToString("N0") تومان
                                  </p>          
                            <div class="quantity-controls">
                                <button type="button" class="qty-btn plus" aria-label="افزایش تعداد" data-id="@item.Id">+</button>
                                <div class="quantity-display" data-id="@item.Id">@item.Quantity</div>
                                <button type="button" class="qty-btn minus" aria-label="کاهش تعداد"
                                data-id="@item.Id" @(item.Quantity <= 1 ? "disabled" : "")>−</button>
                            </div>
                        </div>

                        <form asp-action="RemoveFromCart" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                             <input type="hidden" name="itemId" value="@item.ProductId" />
                             <input type="hidden" name="itemType" value="Product" />
                             <button type="submit" class="remove-btn">حذف</button>
                        </form>
                        @* <button type="button" class="remove-btn" data-id="@item.Id">حذف</button> *@
                    </div>
                </div>
            }
        }
        else
        {
            <div class="item">
                <p>هیچ محصولی در سبد خرید وجود ندارد.</p>
            </div>
        }


        @* سفارش‌های چاپ *@
        @if (Model.PrintRequests != null && Model.PrintRequests.Any())
        {
            foreach (var print in Model.PrintRequests)
            {
                <div class="item" data-id="print-@print.Id">
                    <div class="item-details">
                        <p class="service-title"><strong>درخواست چاپ :</strong></p>
                    @{
                        switch (@print.ServiceType)
                        {
                            case "BlackWhite":
                                <p>سیاه و سفید</p>
                                break;
                            case "Color":
                                <p>رنگی</p>
                                break;
                            case "Plan":
                                <p>پلان</p>
                                break;
                            case "Laminate":
                                <p>لمینیت و پرس</p>
                                break;
                            default:
                            break;
                        }

                        }
                    
                    </div>

                    <div class="counter">
                        <p class="price">@print.TotalPrice.ToString("N0") تومان</p>
                    </div>

                    <form asp-action="RemoveFromCart" method="post" style="display:inline;">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="itemId" value="@print.Id" />
                        <input type="hidden" name="itemType" value="Print" />
                        <button type="submit" class="remove-btn">حذف</button>
                    </form>
                   @*  <button type="button" class="remove-btn" data-id="print-@print.Id">حذف</button> *@
                </div>
            }
        }
        else
        {
            <div class="item">
                <p>هیچ سفارش چاپی در سبد خرید وجود ندارد.</p>
            </div>
        }

        @* جمع کل کل سبد خرید *@
        <div class="total">
            @{
                var totalProducts = Model.Products?.Sum(p => p.TotalPrice) ?? 0;
                var totalPrints = Model.PrintRequests?.Sum(p => p.TotalPrice) ?? 0;
                var grandTotal = totalProducts + totalPrints;
            }
            جمع کل: <span id="total-price">@grandTotal.ToString("N0")</span> تومان
        </div>

    <form asp-action="Submit" method="post">
            @Html.AntiForgeryToken()
            <div class="buttons">
                <button class="btn btn-confirm" type="submit">تایید نهایی و ثبت سفارش</button>
                <button class="btn btn-continue" type="button" onclick="location.href='/Product'">ادامه خرید</button>
            </div>
        </form>
        
</div>

@section Scripts {
        <script>
        // دکمه‌های افزایش تعداد
        document.querySelectorAll('.qty-btn.plus').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.getAttribute('data-id');
                const quantityDisplay = document.querySelector(`.quantity-display[data-id='${id}']`);
                let quantity = parseInt(quantityDisplay.textContent);

                const maxQty = parseInt(document.querySelector(`.product-stock[data-id='${id}']`)?.textContent || 1000); // fallback
                if (quantity < maxQty) {
                    quantity++;
                    quantityDisplay.textContent = quantity;

                    const minusBtn = document.querySelector(`.qty-btn.minus[data-id='${id}']`);
                    if (quantity > 1) {
                        minusBtn.removeAttribute('disabled');
                    }

                    updatePrice(id, quantity);
                    updateTotal();
                } else {
                    alert("تعداد انتخاب‌شده بیشتر از موجودی انبار است.");
                }
            });
        });

        // دکمه‌های کاهش تعداد
        document.querySelectorAll('.qty-btn.minus').forEach(button => {
            button.addEventListener('click', function () {
                const id = this.getAttribute('data-id');
                const quantityDisplay = document.querySelector(`.quantity-display[data-id='${id}']`);
                let quantity = parseInt(quantityDisplay.textContent);

                if (quantity > 1) {
                    quantity--;
                    quantityDisplay.textContent = quantity;

                    if (quantity <= 1) {
                        this.setAttribute('disabled', 'disabled');
                    }

                    updatePrice(id, quantity);
                    updateTotal();
                }
            });
        });

        // به‌روزرسانی قیمت هر محصول
        function updatePrice(id, quantity) {
            const priceElement = document.querySelector(`.price[data-id='${id}']`);
            const unitPrice = parseInt(priceElement.getAttribute('data-unit-price'));

            const total = unitPrice * quantity;
            priceElement.textContent = total.toLocaleString() + " تومان";
        }

        // به‌روزرسانی جمع کل سبد خرید
        function updateTotal() {
            let total = 0;
            document.querySelectorAll('.price').forEach(el => {
                const text = el.textContent.replace(/[^\d]/g, "");
                if (text) {
                    total += parseInt(text);
                }
            });

            const totalDisplay = document.getElementById("total-price");
            if (totalDisplay) {
                totalDisplay.textContent = total.toLocaleString();
            }
        }
    </script>

}
